// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Product.API.Data;

#nullable disable

namespace Product.API.Migrations
{
    [DbContext(typeof(ProductDbContext))]
    partial class ProductDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Product.API.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DescriptionPersian")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NamePersian")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b3f422f5-be2e-440c-be34-eccd5c325d8c"),
                            CreatedAt = new DateTime(2025, 7, 9, 20, 51, 27, 476, DateTimeKind.Utc).AddTicks(7075),
                            CreatedBy = "System",
                            Description = "Electronic devices and accessories",
                            DescriptionPersian = "دستگاه‌ها و لوازم جانبی الکترونیکی",
                            ImageUrl = "",
                            IsActive = true,
                            Name = "Electronics",
                            NamePersian = "لوازم الکترونیکی",
                            SortOrder = 1,
                            UpdatedAt = new DateTime(2025, 7, 9, 20, 51, 27, 476, DateTimeKind.Utc).AddTicks(7077),
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("951ccf06-0e4d-401c-b73d-816632f3e415"),
                            CreatedAt = new DateTime(2025, 7, 9, 20, 51, 27, 476, DateTimeKind.Utc).AddTicks(7126),
                            CreatedBy = "System",
                            Description = "Clothing and fashion items",
                            DescriptionPersian = "لباس و اقلام مد",
                            ImageUrl = "",
                            IsActive = true,
                            Name = "Clothing",
                            NamePersian = "پوشاک",
                            SortOrder = 2,
                            UpdatedAt = new DateTime(2025, 7, 9, 20, 51, 27, 476, DateTimeKind.Utc).AddTicks(7126),
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("77441269-c867-41e1-9a7a-e648768ecc09"),
                            CreatedAt = new DateTime(2025, 7, 9, 20, 51, 27, 476, DateTimeKind.Utc).AddTicks(7172),
                            CreatedBy = "System",
                            Description = "Books and educational materials",
                            DescriptionPersian = "کتاب و مواد آموزشی",
                            ImageUrl = "",
                            IsActive = true,
                            Name = "Books",
                            NamePersian = "کتاب",
                            SortOrder = 3,
                            UpdatedAt = new DateTime(2025, 7, 9, 20, 51, 27, 476, DateTimeKind.Utc).AddTicks(7173),
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("Product.API.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BrandPersian")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ColorPersian")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DescriptionPersian")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Dimensions")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DiscountEndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DiscountPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DiscountStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnSale")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NamePersian")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("OrderCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TagsPersian")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f41639f0-51f6-4879-9e71-898b644d133c"),
                            Brand = "TechBrand",
                            BrandPersian = "تک برند",
                            CategoryId = new Guid("b3f422f5-be2e-440c-be34-eccd5c325d8c"),
                            Color = "",
                            ColorPersian = "",
                            CreatedAt = new DateTime(2025, 7, 9, 20, 51, 27, 476, DateTimeKind.Utc).AddTicks(7296),
                            CreatedBy = "System",
                            Description = "Latest smartphone with advanced features",
                            DescriptionPersian = "آخرین گوشی هوشمند با ویژگی‌های پیشرفته",
                            Dimensions = "",
                            ImageUrl = "",
                            IsActive = true,
                            IsFeatured = true,
                            IsOnSale = true,
                            Name = "Smartphone",
                            NamePersian = "گوشی هوشمند",
                            OrderCount = 0,
                            Price = 599.99m,
                            Size = "",
                            Stock = 100,
                            Tags = "smartphone, mobile, tech",
                            TagsPersian = "گوشی هوشمند، موبایل، تکنولوژی",
                            UpdatedAt = new DateTime(2025, 7, 9, 20, 51, 27, 476, DateTimeKind.Utc).AddTicks(7297),
                            UpdatedBy = "",
                            ViewCount = 0,
                            Weight = 0.0
                        },
                        new
                        {
                            Id = new Guid("e6381bed-5470-4511-98e5-d24b6d3c5348"),
                            Brand = "FashionBrand",
                            BrandPersian = "فشن برند",
                            CategoryId = new Guid("951ccf06-0e4d-401c-b73d-816632f3e415"),
                            Color = "",
                            ColorPersian = "",
                            CreatedAt = new DateTime(2025, 7, 9, 20, 51, 27, 476, DateTimeKind.Utc).AddTicks(7308),
                            CreatedBy = "System",
                            Description = "Comfortable cotton t-shirt",
                            DescriptionPersian = "تی شرت پنبه‌ای راحت",
                            Dimensions = "",
                            ImageUrl = "",
                            IsActive = true,
                            IsFeatured = false,
                            IsOnSale = false,
                            Name = "T-Shirt",
                            NamePersian = "تی شرت",
                            OrderCount = 0,
                            Price = 19.99m,
                            Size = "",
                            Stock = 200,
                            Tags = "tshirt, cotton, clothing",
                            TagsPersian = "تی شرت، پنبه، لباس",
                            UpdatedAt = new DateTime(2025, 7, 9, 20, 51, 27, 476, DateTimeKind.Utc).AddTicks(7309),
                            UpdatedBy = "",
                            ViewCount = 0,
                            Weight = 0.0
                        });
                });

            modelBuilder.Entity("Product.API.Entities.ProductAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NamePersian")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ValuePersian")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributes");
                });

            modelBuilder.Entity("Product.API.Entities.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AltTextPersian")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("Product.API.Entities.Category", b =>
                {
                    b.HasOne("Product.API.Entities.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Product.API.Entities.Product", b =>
                {
                    b.HasOne("Product.API.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Product.API.Entities.ProductAttribute", b =>
                {
                    b.HasOne("Product.API.Entities.Product", "Product")
                        .WithMany("Attributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Product.API.Entities.ProductImage", b =>
                {
                    b.HasOne("Product.API.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Product.API.Entities.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Product.API.Entities.Product", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
